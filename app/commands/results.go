package commands

import (
	"fmt"
	"log"
	"strings"
	"vk-vote-bot/tarantooldb"

	"github.com/mattermost/mattermost-server/v6/model"
	"github.com/tarantool/go-tarantool"
)

func ShowResults(client *model.Client4, conn *tarantool.Connection, channelID string, args []string) {
	if len(args) == 0 {
		sendError(client, channelID, "–§–æ—Ä–º–∞—Ç: vote results [ID]")
		return
	}

	voteID := args[0]
	log.Print("[INFO] –ê–π–¥–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:", voteID)

	resp, err := conn.Select("votes", "primary", 0, 1, tarantool.IterEq, []interface{}{voteID})

	switch {
	case err != nil:
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: %v", err)
		sendError(client, channelID, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
		return
	case len(resp.Data) == 0:
		sendError(client, channelID, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return

	}

	log.Printf("[INFO] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: %v", resp.Data[0])

	var vote tarantooldb.Vote
	err = vote.LoadFromResponse(resp.Data)
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: %v", err)
		sendError(client, channelID, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
		return
	}
	log.Printf("[INFO] –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: %v", vote)

	var result strings.Builder
	result.WriteString("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n")

	for option := range vote.Options {
		count := vote.Options[option]

		result.WriteString(fmt.Sprintf("- %s: %d\n", option, count))
	}

	SendMessage(client, channelID, result.String())
}
